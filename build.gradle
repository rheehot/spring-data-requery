buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }
        
    }
    dependencies {
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"


    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

group = 'com.coupang'
version = '0.0.1-SNAPSHOT'

allprojects {

    repositories {
        maven {
            credentials {
                username "$nexusUser"
                password "$nexusPassword"
            }
            url "http://nexus.coupang.net/content/groups/public"
        }
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone/" }
        // spring-kotlin-coroutine
        // maven { url "https://dl.bintray.com/konrad-kaminski/maven" }
    }
}

subprojects {


// apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'idea'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: "io.spring.dependency-management"

// apply plugin: 'org.junit.platform.gradle.plugin'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$spring_boot_version"
        }

        dependencies {
            dependency "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

            dependency "org.jetbrains.kotlinx:atomicfu-maven-plugin:0.10.0"

            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-io:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-nio:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinx_coroutines_version"

            dependency "com.coupang.kotlinx:kotlinx-logging:$coupang_kotlinx_version"
            dependency "com.coupang.kotlinx:kotlinx-core:$coupang_kotlinx_version"
            dependency "com.coupang.kotlinx:kotlinx-io:$coupang_kotlinx_version"
            dependency "com.coupang.kotlinx:kotlinx-data:$coupang_kotlinx_version"
            dependency "com.coupang.kotlinx:kotlinx-data-requery:$coupang_kotlinx_version"

            dependency "io.requery:requery:$requery_version"
            dependency "io.requery:requery-kotlin:$requery_version"
            dependency "io.requery:requery-jackson:$requery_version"
            dependency "io.requery:requery-processor:$requery_version"

            dependency "org.slf4j:slf4j-api:1.7.25"
            dependency "ch.qos.logback:logback-classic:1.2.3"

            dependency "org.projectlombok:lombok:1.16.16"

            // JSR-310 Backport for JDK 7 / JDK 6
            dependency "org.threeten:threetenbp:1.3.6"

            dependency "com.zaxxer:HikariCP:3.1.0"

            dependency "org.jetbrains:annotations:16.0.2"
            dependency "com.google.code.findbugs:jsr305:3.0.2"

            dependency "javax.cache:cache-api:1.1.0"
            dependency "javax.inject:javax.inject:1"
            dependency "javax.annotation:javax.annotation-api:1.3.2"
            dependency "javax.interceptor:javax.interceptor-api:1.2.2"
            dependency "javax.persistence:persistence-api:1.0.2"
            dependency "javax.validation:validation-api:2.0.1.Final"
            dependency "org.eclipse.persistence:javax.persistence:2.2.0"

            dependency "org.javassist:javassist:3.22.0-GA"

            // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
            dependency "org.apache.commons:commons-lang3:3.7"
            dependency "org.apache.commons:commons-collections4:4.1"

            dependency "org.cache2k:cache2k-all:1.0.2.Final"
            dependency "org.cache2k:cache2k-jcache:1.0.2.Final"

            dependency "io.reactivex.rxjava2:rxjava:$rxjava2_version"
            dependency "io.projectreactor:reactor-core:$reactor_version"

            dependency "com.fasterxml.jackson.core:jackson-core:$jackson_version"
            dependency "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
            dependency "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"

            dependency "org.assertj:assertj-core:3.10.0"
            dependency "org.mockito:mockito-core:2.18.3"
            dependency "com.nhaarman:mockito-kotlin:1.5.0"

            dependency "mysql:mysql-connector-java:8.0.11"

            dependency "com.h2database:h2:1.4.197"
            dependency "org.testcontainers:mysql:1.7.3"
            dependency "org.testcontainers:mariadb:1.7.3"
            dependency "org.testcontainers:postgresql:1.7.3"
        }
    }

    dependencies {

        testImplementation "com.coupang.kotlinx:kotlinx-data"

        testImplementation "org.cache2k:cache2k-all"
        testImplementation "org.cache2k:cache2k-jcache"

        testImplementation "io.reactivex.rxjava2:rxjava:$rxjava2_version"
        testImplementation "io.projectreactor:reactor-core:$reactor_version"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

        testCompile "org.assertj:assertj-core"
        testCompile "org.mockito:mockito-core"
        testCompile "com.nhaarman:mockito-kotlin"

        testImplementation "com.fasterxml.jackson.core:jackson-core"
        testImplementation "com.fasterxml.jackson.core:jackson-databind"
        testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
        testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin"

        // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
        testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
        testRuntime "org.junit.platform:junit-platform-console-standalone:$junit_platform_version"

        // To avoid compiler warnings about @API annotations in JUnit code
        // testCompileOnly "org.apiguardian:apiguardian-api:1.0.0"

        testImplementation "org.springframework.boot:spring-boot-starter-jdbc"
        testImplementation "org.springframework.boot:spring-boot-starter-test"

        testImplementation "com.zaxxer:HikariCP"
        testImplementation "mysql:mysql-connector-java"

        testImplementation "com.h2database:h2"
        testImplementation "org.testcontainers:mysql"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    test {
        useJUnitPlatform()
        // systemProperty 'java.util.logging.manager', 'ch.qos.logback.classic.Logger'
        
        ignoreFailures true
        // maxParallelForks 4
        // set heap size for the test JVM(s)
        minHeapSize = "1G"
        maxHeapSize = "4G"
        jvmArgs "-XX:ReservedCodeCacheSize=2g"
    }

//dokka {
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/dokka"
//    jdkVersion = 8
//    //reportNotDocumented = false
//}

//task dokkaJar(type: Jar, dependsOn: dokka) {
//    classifier = 'javadoc'
//    from dokka.outputDirectory
//}

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
//    archives dokkaJar
    }

    configurations {
        published
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "debop"
                name "Sunghyouk Bae"
                email "sunghyouk.bae@gmail.com"
            }
        }

        scm {
            url "https://github.com/debop/koda-time"
        }
    }

    publishing {
        publications {
            bintrayJava(MavenPublication) {
                from components.java
                artifact sourcesJar
//            artifact dokkaJar

                groupId "${project.group}"
                artifactId "${project.name}"
                version "${project.version}"

                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', "Kotlin extension functions for Java 8 Time and joda-time")
                    root.appendNode('name', "${project.name}")
                    root.appendNode("url", "https://github.com/debop/koda-time")
                    root.children().last() + pomConfig
                }
            }
        }
    }
}