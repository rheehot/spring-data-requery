buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://dl.bintray.com/kotlin/dokka/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"

        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"

        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"

        // for Java apt
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
// for Java apt
apply plugin: "net.ltgt.apt"

// apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'

apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: "io.spring.dependency-management"

// apply plugin: 'org.junit.platform.gradle.plugin'

allOpen {
    annotation("javax.persistence.Entity")
    annotation("io.requery.Entity")
}
noArg {
    annotation("javax.persistence.Entity")
    annotation("io.requery.Entity")
    invokeInitializers = true
}

sourceSets {
    generated {
        "${buildDir}/generated/source/kapt/main/"
    }
}

idea {
    module {
        sourceDirs += file("${buildDir}/generated/source/kapt/main/")
        generatedSourceDirs += file("${buildDir}/generated/source/kapt/main/")
    }
}

group = 'com.coupang'
version = '0.0.1-SNAPSHOT'

repositories {
    maven {
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
        url "http://nexus.coupang.net/content/groups/public"
    }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url "https://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone/" }
    // spring-kotlin-coroutine
    maven { url "https://dl.bintray.com/konrad-kaminski/maven" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$spring_boot_version"
    }

    dependencies {
        
        dependency "com.coupang.kotlinx:kotlinx-logging:$coupang_kotlinx_version"
        dependency "com.coupang.kotlinx:kotlinx-core:$coupang_kotlinx_version"
        dependency "com.coupang.kotlinx:kotlinx-io:$coupang_kotlinx_version"
        dependency "com.coupang.kotlinx:kotlinx-data:$coupang_kotlinx_version"
        dependency "com.coupang.kotlinx:kotlinx-data-requery:$coupang_kotlinx_version"

        dependency "io.requery:requery:$requery_version"
        dependency "io.requery:requery-kotlin:$requery_version"
        dependency "io.requery:requery-processor:$requery_version"

        dependency "org.slf4j:slf4j-api:1.7.25"
        dependency "ch.qos.logback:logback-classic:1.2.3"

        // JSR-310 Backport for JDK 7 / JDK 6
        dependency "org.threeten:threetenbp:1.3.6"

        dependency "com.zaxxer:HikariCP:3.1.0"


        dependency "javax.annotation:javax.annotation-api:1.3.2"
        dependency "javax.interceptor:javax.interceptor-api:1.2.2"
        dependency "javax.persistence:persistence-api:1.0.2"
        dependency "javax.validation:validation-api:2.0.1.Final"
        dependency "org.eclipse.persistence:javax.persistence:2.2.0"
        
        dependency "org.javassist:javassist:3.22.0-GA"

        dependency "org.assertj:assertj-core:3.10.0"
        dependency "org.mockito:mockito-core:2.18.3"
        dependency "com.nhaarman:mockito-kotlin:1.5.0"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinx_coroutines_version"

    implementation "com.coupang.kotlinx:kotlinx-data-requery"

    // spring framework
    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-expression"
    implementation "org.springframework:spring-tx"
    implementation "org.springframework.data:spring-data-commons"

    implementation "io.requery:requery"
    implementation "io.requery:requery-kotlin"

    kapt "io.requery:requery-processor"
    kaptTest "io.requery:requery-processor"

    implementation "org.threeten:threetenbp"

    implementation "org.slf4j:slf4j-api"
    testImplementation "ch.qos.logback:logback-classic"

    implementation "javax.annotation:javax.annotation-api"
    implementation "javax.interceptor:javax.interceptor-api"
    implementation "javax.validation:validation-api"
    implementation "org.eclipse.persistence:javax.persistence"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    testCompile "org.assertj:assertj-core"
    testCompile "org.mockito:mockito-core"
    testCompile "com.nhaarman:mockito-kotlin"

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntime "org.junit.platform:junit-platform-console-standalone:$junit_platform_version"

    // To avoid compiler warnings about @API annotations in JUnit code
    // testCompileOnly "org.apiguardian:apiguardian-api:1.0.0"

    testImplementation "org.springframework.boot:spring-boot-starter-jdbc"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict", "-Xenable-jvm-default"]
        javaParameters = true
        apiVersion = "1.2"
        languageVersion = "1.2"
        suppressWarnings = false
    }
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

test {
    useJUnitPlatform()
    // systemProperty 'java.util.logging.manager', 'ch.qos.logback.classic.Logger'
}

//dokka {
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/dokka"
//    jdkVersion = 8
//    //reportNotDocumented = false
//}

//task dokkaJar(type: Jar, dependsOn: dokka) {
//    classifier = 'javadoc'
//    from dokka.outputDirectory
//}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
//    archives dokkaJar
}

configurations {
    published
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "debop"
            name "Sunghyouk Bae"
            email "sunghyouk.bae@gmail.com"
        }
    }

    scm {
        url "https://github.com/debop/koda-time"
    }
}

publishing {
    publications {
        bintrayJava(MavenPublication) {
            from components.java
            artifact sourcesJar
//            artifact dokkaJar

            groupId "${project.group}"
            artifactId "${project.name}"
            version "${project.version}"

            pom.withXml {
                def root = asNode()
                root.appendNode('description', "Kotlin extension functions for Java 8 Time and joda-time")
                root.appendNode('name', "${project.name}")
                root.appendNode("url", "https://github.com/debop/koda-time")
                root.children().last() + pomConfig
            }
        }
    }
}